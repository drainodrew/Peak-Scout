{"ast":null,"code":"var _jsxFileName = \"/Users/andrewmanuel/SEI/superhi/book-club/book-club/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GymContainer from './components/GymContainer';\nimport Header from './components/Header';\nimport { GlobalStyle } from './styles';\nimport DetailPanel from './components/DetailPanel';\nimport Search from './components/Search';\nimport { Transition } from 'react-transition-group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [gyms, setGyms] = useState([]);\n  const [selectedGym, setSelectedGym] = useState(null);\n  const [showPanel, setShowPanel] = useState(false);\n  const [filteredGyms, setFilteredGyms] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://rock-climbing-api.herokuapp.com/api/gyms');\n        const gyms = await response.json();\n        setGyms(gyms); //need to set filteredGyms or else page will render empty\n\n        setFilteredGyms(gyms);\n      } catch (errors) {\n        console.error(errors, \"error\");\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const pickGym = gym => {\n    setSelectedGym(gym);\n    setShowPanel(true);\n  };\n\n  const closePanel = () => {\n    setShowPanel(false);\n  };\n\n  const filterGyms = searchTerm => {\n    //Convert the array and the input to lowercase & string to make non-case-sensitive\n    const stringSearch = (gymAttribute, searchTerm) => gymAttribute.toLowerCase().includes(searchTerm.toLowerCase()); //if searchTerm returns falsey value, display all gyms\n\n\n    if (!searchTerm) {\n      setFilteredGyms(gyms);\n    } else {\n      setFilteredGyms(gyms.filter(gym => stringSearch(gym.name, searchTerm) || stringSearch(gym.location, searchTerm)));\n    }\n  }; // Conditionally Render Title for Gym Container\n  // Compares the length of the filteredGyms array and the gyms array... if they do not === one another, filter has happened\n\n\n  const hasFiltered = filteredGyms !== gyms.length;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      children: /*#__PURE__*/_jsxDEV(Search, {\n        filterGyms: filterGyms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GymContainer, {\n      gyms: filteredGyms,\n      pickGym: pickGym,\n      isPanelOpen: showPanel,\n      title: hasFiltered ? 'Search results' : \"All Gyms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: showPanel,\n      timeout: 300,\n      children: state => /*#__PURE__*/_jsxDEV(DetailPanel, {\n        gym: selectedGym,\n        closePanel: closePanel,\n        state: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"LYwF9D2NEtzJHMH2gE3Ap+ooSVg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/andrewmanuel/SEI/superhi/book-club/book-club/src/App.jsx"],"names":["React","useState","useEffect","GymContainer","Header","GlobalStyle","DetailPanel","Search","Transition","App","gyms","setGyms","selectedGym","setSelectedGym","showPanel","setShowPanel","filteredGyms","setFilteredGyms","fetchData","response","fetch","json","errors","console","error","pickGym","gym","closePanel","filterGyms","searchTerm","stringSearch","gymAttribute","toLowerCase","includes","filter","name","location","hasFiltered","length","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAG,YAAY;AAC7B,UAAI;AACD,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAD,CAA5B;AAEA,cAAMV,IAAI,GAAG,MAAMS,QAAQ,CAACE,IAAT,EAAnB;AACAV,QAAAA,OAAO,CAACD,IAAD,CAAP,CAJC,CAKD;;AACDO,QAAAA,eAAe,CAACP,IAAD,CAAf;AACD,OAPD,CAOE,OAAOY,MAAP,EAAe;AACfC,QAAAA,OAAO,CAACC,KAAR,CAAcF,MAAd,EAAsB,OAAtB;AACF;AACA,KAXD;;AAaJJ,IAAAA,SAAS;AACN,GAfQ,EAeN,EAfM,CAAT;;AAiBA,QAAMO,OAAO,GAAIC,GAAD,IAAS;AACvBb,IAAAA,cAAc,CAACa,GAAD,CAAd;AACAX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHD;;AAKA,QAAMY,UAAU,GAAG,MAAM;AACvBZ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAKA,QAAMa,UAAU,GAAIC,UAAD,IAAgB;AACrC;AACI,UAAMC,YAAY,GAAG,CAACC,YAAD,EAAeF,UAAf,KACnBE,YAAY,CAACC,WAAb,GAA2BC,QAA3B,CAAoCJ,UAAU,CAACG,WAAX,EAApC,CADF,CAFiC,CAMjC;;;AACA,QAAI,CAACH,UAAL,EAAiB;AACfZ,MAAAA,eAAe,CAACP,IAAD,CAAf;AACD,KAFD,MAEO;AACLO,MAAAA,eAAe,CAAEP,IAAI,CAACwB,MAAL,CAAaR,GAAD,IAASI,YAAY,CAACJ,GAAG,CAACS,IAAL,EAAWN,UAAX,CAAZ,IAAsCC,YAAY,CAACJ,GAAG,CAACU,QAAL,EAAeP,UAAf,CAAvE,CAAF,CAAf;AAGD;AACF,GAdD,CAhCgB,CAgDhB;AACA;;;AACA,QAAMQ,WAAW,GAAGrB,YAAY,KAAKN,IAAI,CAAC4B,MAA1C;AACA,sBACA;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEI,QAAC,MAAD;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,UAAU,EAAEV;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI,QAAC,YAAD;AACE,MAAA,IAAI,EAAEZ,YADR;AAEE,MAAA,OAAO,EAAES,OAFX;AAGE,MAAA,WAAW,EAAEX,SAHf;AAIE,MAAA,KAAK,EAAEuB,WAAW,GAAG,gBAAH,GAAsB;AAJ1C;AAAA;AAAA;AAAA;AAAA,YALJ,eAUI,QAAC,UAAD;AAAY,MAAA,EAAE,EAAEvB,SAAhB;AAA2B,MAAA,OAAO,EAAE,GAApC;AAAA,gBACIyB,KAAD,iBAAW,QAAC,WAAD;AAAa,QAAA,GAAG,EAAE3B,WAAlB;AAA+B,QAAA,UAAU,EAAEe,UAA3C;AAAuD,QAAA,KAAK,EAAEY;AAA9D;AAAA;AAAA;AAAA;AAAA;AADd;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA,kBADA;AAgBD,CAnED;;GAAM9B,G;;KAAAA,G;AAqEN,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport GymContainer from './components/GymContainer';\nimport Header from './components/Header'\nimport { GlobalStyle } from './styles';\nimport DetailPanel from './components/DetailPanel';\nimport Search from './components/Search';\nimport {Transition} from 'react-transition-group'\n\nconst App = () => {\n  const [gyms, setGyms] = useState([])\n  const [selectedGym, setSelectedGym] = useState(null)\n  const [showPanel, setShowPanel] = useState(false)\n  const [filteredGyms, setFilteredGyms] = useState([])\n  useEffect(() => {\n    const fetchData = async () => {\n     try {\n        const response = await fetch('https://rock-climbing-api.herokuapp.com/api/gyms')\n        \n        const gyms = await response.json()\n        setGyms(gyms)    \n        //need to set filteredGyms or else page will render empty\n       setFilteredGyms(gyms)\n     } catch (errors) {\n       console.error(errors, \"error\" )\n    }\n    }\n    \nfetchData()\n  }, [])\n\n  const pickGym = (gym) => {\n    setSelectedGym(gym)\n    setShowPanel(true)\n  }\n\n  const closePanel = () => { \n    setShowPanel(false)\n  }\n\n  \n  const filterGyms = (searchTerm) => {\n//Convert the array and the input to lowercase & string to make non-case-sensitive\n    const stringSearch = (gymAttribute, searchTerm) => \n      gymAttribute.toLowerCase().includes(searchTerm.toLowerCase())\n\n\n    //if searchTerm returns falsey value, display all gyms\n    if (!searchTerm) {\n      setFilteredGyms(gyms)\n    } else {\n      setFilteredGyms( gyms.filter((gym) => stringSearch(gym.name, searchTerm) || stringSearch(gym.location, searchTerm)\n      )\n      )\n    }\n  }\n\n  // Conditionally Render Title for Gym Container\n  // Compares the length of the filteredGyms array and the gyms array... if they do not === one another, filter has happened\n  const hasFiltered = filteredGyms !== gyms.length\n  return (\n  <>\n    <GlobalStyle />\n      <Header>\n        <Search filterGyms={filterGyms}/>\n    </Header>\n      <GymContainer\n        gyms={filteredGyms}\n        pickGym={pickGym}\n        isPanelOpen={showPanel}\n        title={hasFiltered ? 'Search results' : \"All Gyms\"} />\n      <Transition in={showPanel} timeout={300}>\n        {(state) => <DetailPanel gym={selectedGym} closePanel={closePanel} state={state}/>}\n    </Transition>\n      </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}