{"ast":null,"code":"var _jsxFileName = \"/Users/andrewmanuel/SEI/superhi/book-club/book-club/src/components/GymContainer/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { debounce } from 'lodash-es';\nimport { Container, H2, GymList } from './styles';\nimport Gym from '../Gym';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GymContainer = _ref => {\n  _s();\n\n  let {\n    gyms,\n    pickGym,\n    isPanelOpen\n  } = _ref;\n  const [scroll, setScroll] = useState(0); // The doubounce function delays invoking a specificed function, until after a certain amount of time has passes. Which is specificied as a 2nd argument in milliseconds\n  // Structing the debounce as a callback\n  // we want it to only take effect after the user has stopped scrolling... hence the delay\n\n  useEffect(() => {\n    const handleScroll = debounce(() => {\n      // window.scrollY returns the # of pixels that the document is currently scrolled vertically\n      setScroll(window.scrollY);\n    }, 100); //use effect will run each time isPanelOpen's value changes\n\n    if (!isPanelOpen) {\n      window.addEventListener('scroll', handleScroll);\n    } //clean up function \n    //we want to remove any pre\n\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [isPanelOpen]);\n  console.log(scroll);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    $isPanelOpen: isPanelOpen,\n    children: [/*#__PURE__*/_jsxDEV(H2, {\n      children: \"All Gyms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(GymList, {\n      children: gyms.map(gym => /*#__PURE__*/_jsxDEV(Gym, {\n        gym: gym,\n        pickGym: pickGym\n      }, gym.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n};\n\n_s(GymContainer, \"JTWh8Ghx6FsMkBul6++zT/uRfFc=\");\n\n_c = GymContainer;\nexport default GymContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"GymContainer\");","map":{"version":3,"sources":["/Users/andrewmanuel/SEI/superhi/book-club/book-club/src/components/GymContainer/index.jsx"],"names":["React","useRef","useEffect","useState","debounce","Container","H2","GymList","Gym","GymContainer","gyms","pickGym","isPanelOpen","scroll","setScroll","handleScroll","window","scrollY","addEventListener","removeEventListener","console","log","map","gym","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,QAAR,QAAuB,WAAvB;AACA,SAASC,SAAT,EAAoBC,EAApB,EAAwBC,OAAxB,QAAuC,UAAvC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;;AAEA,MAAMC,YAAY,GAAG,QAAkC;AAAA;;AAAA,MAAjC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,GAAiC;AACrD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,CAAD,CAApC,CADqD,CAGrD;AACD;AACC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,YAAY,GAAGX,QAAQ,CAAC,MAAM;AAClC;AACAU,MAAAA,SAAS,CAACE,MAAM,CAACC,OAAR,CAAT;AACD,KAH4B,EAG1B,GAH0B,CAA7B,CADc,CAMd;;AACA,QAAI,CAACL,WAAL,EAAkB;AAChBI,MAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACD,KATa,CAUd;AACA;;;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AAED,KAHD;AAID,GAhBQ,EAgBN,CAACH,WAAD,CAhBM,CAAT;AAkBAQ,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACA,sBACA,QAAC,SAAD;AAAW,IAAA,YAAY,EAAED,WAAzB;AAAA,4BACE,QAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AAAA,gBACGF,IAAI,CAACY,GAAL,CAAUC,GAAD,iBACR,QAAC,GAAD;AAAkB,QAAA,GAAG,EAAEA,GAAvB;AAA4B,QAAA,OAAO,EAAEZ;AAArC,SAAUY,GAAG,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAWK,CApCP;;GAAMf,Y;;KAAAA,Y;AAqCN,eAAeA,YAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport {debounce} from 'lodash-es'\nimport { Container, H2, GymList } from './styles'\nimport Gym from '../Gym'\n\nconst GymContainer = ({gyms, pickGym, isPanelOpen}) => {\n  const [scroll, setScroll] = useState(0);\n\n  // The doubounce function delays invoking a specificed function, until after a certain amount of time has passes. Which is specificied as a 2nd argument in milliseconds\n // Structing the debounce as a callback\n  // we want it to only take effect after the user has stopped scrolling... hence the delay\n  useEffect(() => {\n    const handleScroll = debounce(() => {\n      // window.scrollY returns the # of pixels that the document is currently scrolled vertically\n      setScroll(window.scrollY)\n    }, 100)\n\n    //use effect will run each time isPanelOpen's value changes\n    if (!isPanelOpen) {\n      window.addEventListener('scroll', handleScroll)\n    }\n    //clean up function \n    //we want to remove any pre\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n\n    }\n  }, [isPanelOpen])\n\n  console.log(scroll)\n  return (\n  <Container $isPanelOpen={isPanelOpen}>\n    <H2>All Gyms</H2>\n    <GymList>\n      {gyms.map((gym) => (\n        <Gym key={gym.id} gym={gym} pickGym={pickGym}/>\n      ))}\n    </GymList>\n\n  </Container>\n)\n      }\nexport default GymContainer"]},"metadata":{},"sourceType":"module"}